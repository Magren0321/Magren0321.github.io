<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>es6 on Magren&#39;s Blog</title>
    <link>https://magren.cn/tags/es6/</link>
    <description>Recent content in es6 on Magren&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 May 2020 21:29:47 +0000</lastBuildDate><atom:link href="https://magren.cn/tags/es6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>es6中的promise</title>
      <link>https://magren.cn/es6%E4%B8%AD%E7%9A%84promise/</link>
      <pubDate>Wed, 27 May 2020 21:29:47 +0000</pubDate>
      
      <guid>https://magren.cn/es6%E4%B8%AD%E7%9A%84promise/</guid>
      <description>Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。
有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口，使得控制异步操作更加容易。
Promise也有一些缺点：
 首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。 如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。 当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。  promise的特点  **对象的状态不受外界影响。**Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。 **一旦状态改变，就不会再变，任何时候都可以得到这个结果。**Promise的对象状态改变，要么是成功，要么就是失败，只要发生这两种情况，状态就会凝固，称为resolvd（已定型）。改变发生后，再添加回调函数，也是会得到这个结果。  用法 创造Promise实例 Promise对象是一个构造函数，用来生成Promise实例。
const promise = new Promise(function(resolve, reject) { if (/* 异步操作成功 */){ resolve(value); } else { reject(error); } });  resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；
  reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。
 then方法 接着用then方法指定resolved状态和rejected状态的回调函数：
promise.then(function(value) { // success }, function(error) { // failure }); 第一个函数是状态对象变为rejected的调用，第二个是resolved的调用，第二个函数是可选的。
then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。
promise.then(function(value) { }.then(function (comments) { console.log(&amp;#34;resolved: &amp;#34;, comments); }, function (err){ console.</description>
    </item>
    
  </channel>
</rss>
