<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Typescript on Magren&#39;s Blog</title>
    <link>https://magren.cn/tags/typescript/</link>
    <description>Recent content in Typescript on Magren&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 10 Feb 2021 18:11:21 +0800</lastBuildDate><atom:link href="https://magren.cn/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于ChatRoom</title>
      <link>https://magren.cn/%E5%85%B3%E4%BA%8Echatroom/</link>
      <pubDate>Wed, 10 Feb 2021 18:11:21 +0800</pubDate>
      
      <guid>https://magren.cn/%E5%85%B3%E4%BA%8Echatroom/</guid>
      <description>学习新东西👋 最近这几天在学习React，所以这个项目主要目的是给我熟悉React，我个人是喜欢边学习一样新东西边动手，只有输出才会让我记忆更深刻，其次也会踩到一些光看是不会碰到的坑，加上之前学习node.js好像也没有做什么，于是就想到了结合在一块做一个聊天室。✌
因为是第一次做React，如果觉得有什么需要修改的欢迎提出Issuse，也欢迎你的star⭐
项目地址：ChatRoom
项目截图：  
 
 
后端 后端基于Node.js + Express + Socket.io + MongoDB
Node.js操作MongoDB以及用express写接口之前都有在博客中大致的总结过：
Node.js+express
Node.Js操作MongoDB
这次用的新东西就是Socket.io。
前人的工作👇  Socket.IO is a library that enables real-time, bidirectional and event-based communication between the browser and the server
 即是说Socket.io可以实现服务器与客户端之间的一个实时的双向通信。
在连接Socket.io的之前还得先知道WebSocket，在WebSocket问世之前，在创建拥有双向通信机制的 web 应用程序时，就只能利用 HTTP 轮询的方式，由此产生了 “短轮询” 和 “长轮询”。
 短轮询通过客户端定期轮询来询问服务端是否有新的信息产生，缺点也是显而易见，轮询间隔大了则信息不够实时，轮询间隔过小又会消耗过多的流量，增加服务器的负担。
长轮询是对短轮询的优化，需要服务端做相应的修改来支持。但是每次请求还是都要带上HTTP请求头部，而且在长轮询的连接结束之后，服务器端积累的新消息要等到下次客户端连接时才能传递。
 Websocket协议就是为了解决长轮询的痛点而诞生的，其基于TCP协议，是一种双全工通信技术、复用HTTP握手通道。它与HTTP协议的唯一关系就是它的握手请求可以作为一个Upgrade request经由HTTP服务器解析，且与HTTP使用一样的端口。
接着是Socket.io，Socket.io底层基于engine.io，封装了WebSocket，其屏蔽了底层细节，让顶层调用非常简单。同时它还支持许多种轮询机制以及其他通信方式，当环境不支持WebSocket的时候它能自动选择最佳的方式来实现网络的实时通信。
使用 引入io设置端口后监听connect事件：
const server = require(&amp;#39;http&amp;#39;).Server(app); const io = require(&amp;#39;socket.io&amp;#39;)(server); server.listen(3001); //端口设置3001  io.</description>
    </item>
    
    <item>
      <title>关于CloudMusic</title>
      <link>https://magren.cn/%E5%85%B3%E4%BA%8Ecloudmusic/</link>
      <pubDate>Thu, 28 Jan 2021 16:33:21 +0800</pubDate>
      
      <guid>https://magren.cn/%E5%85%B3%E4%BA%8Ecloudmusic/</guid>
      <description>前言 这个项目是我某天在宿舍听歌想到的，从16年注册网易云到现在都有五年的时间了，虽然这个平台现在越来越让我失望，但是听了五年了都听出感情来了，就在这个假期里面花了将近一个月磨磨蹭蹭写出来这个项目。至于为什么写的是移动端页面嘛，是因为那时候我听歌是用着我的手机听的……所以模仿的UI也是安卓版网易云音乐的UI。虽然功能没有全部实现，但是比较核心的播放页面还是做出来了，这篇博客也是记录一下这个项目的至今的实现过程还有一些坑。
项目基于Vue + Typescript + Vuetify UI实现。
项目地址：CloudMusic
已经实现的功能：
 登录 获取歌单 创建歌单 删除/取消收藏歌单 播放歌曲 排行榜 每日推荐 推荐歌单  项目截图：    
  
播放 这个可以说是核心功能，毕竟一个听歌的平台不能听歌就说不过去了。
首先歌曲的选择可以来自歌单，可以来自发现页的轮播图，还可以来自播放页面的选择，然后控制歌曲的播放暂停既可以从其他页面下方的播放tab控制，又可以在播放的页面进行控制，如果使用Prop和Emit实在是太多太乱了，所以我这里使用了Vuex。
 Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。
 其实就是把我们需要的组件共享状态抽取出来，以一个全局单例模式管理，然后我们可以在任何一个组件下通过Vuex来修改其状态或者值。
于是我将所选的歌曲ID，以及当前播放的歌单信息，ID传进了Vuex，在播放页面只需要监听Vuex中歌曲id的变化，即可播放新的歌曲；监听Vuex中是否暂停的状态，来控制audio组件暂停或者播放。
播放进度 进度条我用的是Vuetify UI中的slider组件，通过v-model来设定其值。
在audio中通过 @timeupdate 来监听audio当前的播放时间戳，接着与播放总时长相除并乘以100得到当前播放进度的百分比，接着赋值给slider组件即可，进度条左边的时间也是通过当前播放的时间戳转换成的时间。
但是这里会有个问题，就是需要通过移动滑块来修改播放的进度，在刚刚@timeupdate绑定的方法中只是单向的将进度赋值给滑块，并且在音乐播放的时候这个方法是一直在运行的，这样无论我怎样移动滑块，滑块都会立马就瞬移到了当前的播放位置，所以这里还得加一个监听是否正在移动滑块的方法，当移动滑块的时候不将当前播放的进度赋值给滑块，然后当我松手的时候将滑块当前的进度转换成时间戳赋值回给audio的播放时间。
我的解决办法是给滑块组件引入了 @mousedown 和 @mouseup，当鼠标按下的时候将一个变量赋值为true，抬起的时候为false，修改@timeupdate中的方法，设定其只有在该变量为false的时候才会对滑块组件赋值，但是滑动滑块的时候也得修改当前的播放时间，所以给滑块组件引入了 @change ，当手动更改了滑块的值的时候会触发该方法，在这个方法里面对audio的播放进度进行修改。
 
歌词实现 从后台获取的歌词是一个字符串，但是每行歌词都用了\n标识，所以将字符串以\n分割可以得到每行的歌词，每行歌词里中括号里面的是时间，还得将每句歌词以中括号进行分割，最后将时间转换成时间戳，与歌词放在一块做为一个类放入数组中。
设置一个索引，用于记录是第几行歌词，通过offsetHeight获取到歌词组件的高度来确认歌词中线所在的位置，通过索引乘以每行歌词的高度来判断是否滚动。
其实就是给外部的div设置超出隐藏，然后通过修改mragin-top来实现一个滚动的效果，而margin-top的值是由中线的高度减去索引乘以每行歌词的高度来决定。同时可以通过transition属性来设定其改变的时间。
例如：transition: margin-top 1s;
表示的就是说margin-top属性会在一秒内完成。
关于Vue的自定义指令 在制作的过程中我想实现个功能就是点击某个组件以外的位置的时候隐藏该组件，即点击的不是该组件的时候会执行一个方法。
我查资料的时候发现vue并没有这么一个指令，但是我可以通过自己去自定义这么一个指令来实现这个功能。
首先看看一个自定义的指令对象的钩子函数：
 bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。 inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。 update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下) componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。 unbind：只调用一次，指令与元素解绑时调用。  接着钩子函数中都有以下几个参数：</description>
    </item>
    
    <item>
      <title>Vue Typescript下axios的封装和使用</title>
      <link>https://magren.cn/vue-typescript%E4%B8%8Baxios%E7%9A%84%E5%B0%81%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 12 Aug 2020 14:45:50 +0000</pubDate>
      
      <guid>https://magren.cn/vue-typescript%E4%B8%8Baxios%E7%9A%84%E5%B0%81%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
      <description>8月到了，一个莫名其妙的机遇也砸到了脸上，提着行李一个人跑到了广州跟一个毕业的师兄搞创业的项目，怀着点点的不安以及兴奋，迈出离开学校的第一步。
由于就住在办公室的一间房里，出门即工作，开始了朝五晚九的工作生活，晚上的时候就折腾自己的项目，有点梦回星空时候夏训营的感觉，很累也充实。每天也在掉头发以及烦恼吃什么
自己写的华广地图给自家eo发了一份玩，结果给征收了，上线成了星空的产品，并且要求再进行完善 😟 想了下干脆给每个地点的marker添加一个点击事件，点击后可以看到该地点的详细介绍，不过每个地方都要图片，放在本地太大了，可能会造成卡顿，遂决定放在服务器上，于是重新看了一遍axios同时自己学着网上的一些教程做了一个封装，并解决了跨域的问题。
封装axios import axios, { AxiosRequestConfig, AxiosResponse } from &amp;#39;axios&amp;#39; const showStatus = (status: number) =&amp;gt; { let message = &amp;#39;&amp;#39; switch (status) { case 400: message = &amp;#39;请求错误(400)&amp;#39; break case 401: message = &amp;#39;未授权，请重新登录(401)&amp;#39; break case 403: message = &amp;#39;拒绝访问(403)&amp;#39; break case 404: message = &amp;#39;请求出错(404)&amp;#39; break case 408: message = &amp;#39;请求超时(408)&amp;#39; break case 500: message = &amp;#39;服务器错误(500)&amp;#39; break case 501: message = &amp;#39;服务未实现(501)&amp;#39; break case 502: message = &amp;#39;网络错误(502)&amp;#39; break case 503: message = &amp;#39;服务不可用(503)&amp;#39; break case 504: message = &amp;#39;网络超时(504)&amp;#39; break case 505: message = &amp;#39;HTTP版本不受支持(505)&amp;#39; break default: message = `连接出错(${status})!</description>
    </item>
    
    <item>
      <title>关于HG地图</title>
      <link>https://magren.cn/%E5%85%B3%E4%BA%8Ehg%E5%9C%B0%E5%9B%BE/</link>
      <pubDate>Thu, 30 Jul 2020 14:53:09 +0000</pubDate>
      
      <guid>https://magren.cn/%E5%85%B3%E4%BA%8Ehg%E5%9C%B0%E5%9B%BE/</guid>
      <description>最近都在学习前端的路上缓慢前进，在了解了Vue后就开始学习Typescript，每次学习到新东西的时候都会忍不住用新的东西去做一个自己感兴趣的东西，可能自己觉得这样子很Coooooooooooool！👊
之前偶然间也看到了吉珠的地图，觉得很优秀，碰巧我们学校没有相关的产品，只有一张画出来图片地图，稍加思索
 考虑到了便携性，决定放在移动端使用 要可以标示出学校的设施地点 校巴的路线以及上下车地点 要有产品的介绍还有学校的介绍 最好能够看到学校实景  加上自己之前学了vue，便打算结合vue来写，说干就干，起飞！✈️
然后第一天就翻车在了创建项目上。
一开始装的Vue的版本是2.x版本，创建新项目的webpack版本是3.6的，使用Typescript的时候会提示需要升级webpack到4.x版本，一开始并没有考虑太多，它提示啥问题就Google啥问题怎么解决（面向搜索引擎编程），大致看了一圈，都是卸载旧版的依赖装新的依赖，同时修改配置，但是他们的教程基本都不一样，唯一一样的地方就是都很复杂，也不知道咋选，就挑了个顺眼的就开始照着写，结果失败了……后面发现Vue3.x版本开始都已经开始适配Typescript了，即创建项目的时候就可以选择是否使用Typescript，同时自动给你配置好……啊这。
旧版本Vue卸载！
 npm uninstall vue-cli -g
 最新版本Vue安装！
 npm install -g @vue/cli
 再来一遍，起飞！✈️
项目地址：HgMap 地图链接：华广地图
环境依赖  vue/cli 4.4.6 typescript element-ui：ui组件 vue-class-component：类装饰器 vue-property-decorator：基于 vue 组织里 vue-class-component 所做的拓展 vue2-svg-icon：SVG图标组件 地图资源来自高德地图api  注：由于vue-cli 4版本不自带vue.config.js，故需自行在根目录创建并且配置，否则打包项目会找不到静态资源。
Vue 和 Typescript的使用 前提 script标签加入 : lang=“ts”
&amp;lt;script lang=&amp;#34;ts&amp;#34;&amp;gt; ··· &amp;lt;/script&amp;gt; 创建组件 import { Component, Prop, Vue, Watch } from &amp;#39;vue-property-decorator&amp;#39;; @Component export default class Test extends Vue { } 组件的引入 import Mapmenu from &amp;#39;@/components/Mapmenu.</description>
    </item>
    
  </channel>
</rss>
