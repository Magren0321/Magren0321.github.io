<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Magren&#39;s Blog</title>
    <link>https://magren.cn/tags/android/</link>
    <description>Recent content in Android on Magren&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 16 Apr 2020 15:43:52 +0000</lastBuildDate><atom:link href="https://magren.cn/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android的EventBus使用</title>
      <link>https://magren.cn/android%E7%9A%84eventbus%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 16 Apr 2020 15:43:52 +0000</pubDate>
      
      <guid>https://magren.cn/android%E7%9A%84eventbus%E4%BD%BF%E7%94%A8/</guid>
      <description>这两天在网上想着找Android系统学习的路线，然后发现了阿里云上的阿里巴巴Android开发手册，虽然网上已经有免费下载的地方了，不过凭着不能白嫖的感觉，我还是花钱支持了下，其实就卖一块钱，而且还有一份考试证书的资格，总的来说还是很舒服的。
这两天在网上想着找Android系统学习的路线，然后发现了阿里云上的阿里巴巴Android开发手册，虽然网上已经有免费下载的地方了，不过凭着不能白嫖的感觉，我还是花钱支持了下，其实就卖一块钱，而且还有一份考试证书的资格，总的来说还是很舒服的。
网址在下面：
 阿里巴巴Android开发手册
 估摸是我接触的太少的缘故，在一开始的第一条我就懵掉了
  【强制】Activity 间的数据通信，对于数据量比较大的，避免使用 Intent + Parcelable 的方式，可以考虑 EventBus 等替代方案，以免造成 TransactionTooLargeException。   这个EventBus……是啥？？？
EventBus概述 EventBus是一个Android事件发布/订阅框架，通过解耦发布者和订阅者简化Android事件传递，这里的事件可以理解为消息。事件传递既可以用于Android四大组件间通讯，也可以用于异步线程和主线程间通讯等。 传统的事件传递方式包括：Handler、BroadcastReceiver、Interface回调，相比之下EventBus的有点是代码简洁，使用简单，并将事件发布和 订阅充分解耦。
在这里面，又有三个对象：
 事件Event：就是消息，分为一般事件和Sticky（黏性）事件，Sticky事件的特殊在于，当事件发布后，再有订阅者订阅该类型事件，依然能收到该类型 事件的最近的一个Sticky事件 订阅者Subscriber：订阅事件的对象，当发布者发布事件猴，EventBus会执行订阅者的事件响应函数。订阅者通过register接口订阅某个事件类型，unregister接口退订 发布者：发布事件的对象，通过post接口发布事件，黏性事件通过postSticky  Github地址：EventBus
使用 道理我都懂，但是我得知道它是怎么用的，不然日后复制起来粘贴在哪都不知道，于是我在网上找到了它的使用方法。
一般事件 自定义一个事件类 public class Event { String message; public Event(String message){ this.message = message; } public String getMessage() { return message; } } 在需要接收消息的页面注册 EventBus.getDefault().register(this); 接收消息的方法 @Subscribe(threadMode = ThreadMode.MAIN) public void getEvent(Event event) { msg = event.</description>
    </item>
    
    <item>
      <title>Android自定义view的定义</title>
      <link>https://magren.cn/android%E8%87%AA%E5%AE%9A%E4%B9%89view%E7%9A%84%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Tue, 14 Apr 2020 15:16:34 +0000</pubDate>
      
      <guid>https://magren.cn/android%E8%87%AA%E5%AE%9A%E4%B9%89view%E7%9A%84%E5%AE%9A%E4%B9%89/</guid>
      <description>自定义 View 就是通过继承 View 或者 View 的子类，并在新的类里面实现相应的处理逻辑（重写相应的方法），以达到自己想要的效果。
 分类  自定义ViewGroup：自定义ViewGroup一般是利用现有的组件根据特定的布局方式来组成新的组件，大多继承自ViewGroup或各种Layout，包含有子View。 自定义view: 在没有现成的View，需要自己实现的时候，就使用自定义View，一般继承自View，SurfaceView或其他的View，不包含子View。  构造函数 无论是我们继承系统View还是直接继承View，都需要对构造函数进行重写，构造函数有多个，至少要重写其中一个才行。
public class TestView extends View { /** * 在java代码里new的时候会用到 * @param context */ public TestView(Context context) { super(context); } /** * 在xml布局文件中使用时自动调用 * @param context */ public TestView(Context context, @Nullable AttributeSet attrs) { super(context, attrs); } /** * 不会自动调用，如果有默认style时，在第二个构造函数中调用 * @param context * @param attrs * @param defStyleAttr */ public TestView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); } /** * 只有在API版本&amp;gt;21时才会用到 * 不会自动调用，如果有默认style时，在第二个构造函数中调用 * @param context * @param attrs * @param defStyleAttr * @param defStyleRes */ @RequiresApi(api = Build.</description>
    </item>
    
    <item>
      <title>Rxjava的CompositeDisposable</title>
      <link>https://magren.cn/rxjava%E7%9A%84compositedisposable/</link>
      <pubDate>Sun, 29 Mar 2020 15:13:03 +0000</pubDate>
      
      <guid>https://magren.cn/rxjava%E7%9A%84compositedisposable/</guid>
      <description>之前在学习Rxjava的时候发现仍有部分知识点自己遗漏了，不够严谨，在这里补充多一个知识点。那就是CompositeDisposable类。
在用Rxjava配合Retorfit的时候，发送请求，拿到数据后我们要让数据显示在视图中的时候往往会刷新页面，但假如，我们发送请求出去的时候网络比较差，返回数据比较慢，然后我们又手快的关闭了当前这个Activity，那RxJava当拿到返回的数据的时候去刷新界面就会报空指针异常了。就是说，请求过程中，我们的UI层Destroy的时候，不及时取消订阅，就会造成内存泄漏。这里就要用到我们的CompositeDisposable。
使用 使用的方法大致就是三步：
 ui层创建的时候，实例化我们的CompositeDisposable类。 把订阅返回的disposable对象加入到我们的管理器中。 ui层销毁的时候清空订阅对象。  创建ui的时候实例化 @Override public void onStart() { if (mSubscriptions == null) { mSubscriptions = new CompositeDisposable(); } } 添加disposable对象 netWork.getInstance().getDataService() .translateYouDao(q,from,to,appID,salt,sign,signType,curtime) .subscribeOn(Schedulers.newThread()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(new Observer&amp;lt;TranslationBean&amp;gt;() { @Override public void onSubscribe(Disposable d) { mSubscriptions.add(d); //这里添加到容器中  } @Override public void onNext(TranslationBean translationBean) { List&amp;lt;TranslationBean&amp;gt; list_word = new ArrayList&amp;lt;&amp;gt;(); list_word.add(translationBean); mView.showResult(list_word); } @Override public void onError(Throwable e) { mView.showConnection(); } @Override public void onComplete() { } }); ui层销毁时候解除订阅 @Override public void onDestroy() { if (mSubscriptions !</description>
    </item>
    
    <item>
      <title>Android的rxjava2</title>
      <link>https://magren.cn/android%E7%9A%84rxjava2/</link>
      <pubDate>Fri, 13 Mar 2020 14:59:35 +0000</pubDate>
      
      <guid>https://magren.cn/android%E7%9A%84rxjava2/</guid>
      <description>RxJava是利用观察者模式来实现一些列的操作，所以对于观察者模式中的观察者，被观察者，以及订阅、事件需要有一个了解。
Observable：在观察者模式中称为“被观察者”； Observer：观察者模式中的“观察者”，可接收Observable发送的数据； subscribe：订阅，观察者与被观察者，通过Observable的subscribe()方法进行订阅； Subscriber：也是一种观察者，在2.0中 它与Observer没什么实质的区别，不同的是 Subscriber要与Flowable(也是一种被观察者)联合使用，Obsesrver用于订阅Observable，而Subscriber用于订阅Flowable.
观察者模式 rxjava的实现主要是通过观察者模式实现的。
A 对象（观察者）对 B 对象（被观察者）的某种变化高度敏感,需要在 B 变化的一瞬间做出反应. 在程序的观察者模式，观察者不需要时刻盯着被观察者,而是采用注册或者称为订阅的方式，告诉被观察者：我需要你的某某状态，你要在它变化的时候通知我 同时我们也可以多个观察者对应一个被观察者
其实在android中也有很多自带的观察者模式。最明显的莫过于点击事件。说个最简单的例子，点击按钮后弹一个Toast。那么，我们在点击按钮的时候，告知系统，此时，我需要弹一个吐司。那么就这么弹出来了。那么，这个时候问题来了。我是否需要实时去监听这个按钮呢？答案是不需要的。这就和前面的举例有的差距了。换句话说。我只要在此按钮进行点击时进行监听就可以了。这种操作被称为订阅。也就是说Button通过setOnClickListener对OnclickListener进行了订阅了操作，来监听onclick方法。
基本使用 rxjava的基本实现主要是三点：
 初始化 Observable （被观察者） 初始化 Observe（观察者） 建立两者之间的订阅关系  创建Observable Observable&amp;lt;String&amp;gt; observable = Observable.create(new ObservableOnSubscribe&amp;lt;String&amp;gt;() { @Override public void subscribe(ObservableEmitter&amp;lt;String&amp;gt; e) throws Exception { e.onNext(&amp;#34;hello world&amp;#34;); e.onComplete(); //调用complete后下面将不再接受事件  } }); 创建Observe Observer&amp;lt;String&amp;gt;observer=new Observer&amp;lt;String&amp;gt;() { @Override public void onSubscribe(Disposable d) { Log.i(&amp;#34;rxjava&amp;#34;, &amp;#34;onSubscribe: &amp;#34; + d); } @Override public void onNext(String string) { Log.</description>
    </item>
    
    <item>
      <title>Android Activity生命周期</title>
      <link>https://magren.cn/android-activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Fri, 06 Mar 2020 14:36:01 +0000</pubDate>
      
      <guid>https://magren.cn/android-activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>先上Google提供的经典图，是对Activity生命周期各个阶段之间导航转换的直观展现。
Activity类提供了六个核心回调：onCreate()、onStart()、onResume()、onPause()、onStop()和onDestroy()。
 生命周期 
说明  在正常的情况下，Activity从启动到结束会按以下的顺序经历整个生命周期：onCreate()-&amp;gt;onStart()-&amp;gt;onResume()-&amp;gt;onPause()-&amp;gt;onStop()-&amp;gt;onDestory()。 onCreate():系统首次创建Activity的时候触发，可以做一些初始化的工作，比如初始化Activity所需要的数据，还有调用setContentView加载界面布局资源。 onRestart()：表示Activity正在重新启动。一般情况下，当当前Activity从不可见重新变为可见状态时，onRestart就会被调用。这种情形一般是用户行为导致的，比如用户按Home键切换到桌面或打开了另一个新的Activity，接着用户又回到了这个Actvity。 onStart(): 表示Activity正在被启动，即将开始，这时Activity已经出现了，**但是还没有出现在前台，无法与用户交互。**这个时候可以理解为Activity已经显示出来，但是我们还看不到。 onResume():表示Activity已经可见了，并且出现在前台并开始活动。需要和onStart()对比，onStart的时候Activity还在后台，onResume的时候Activity才显示到前台。 onPause():表示 Activity正在停止，仍可见，正常情况下，紧接着onStop就会被调，onPause中不能进行耗时操作，会影响到新Activity的显示。因为onPause必须执行完，新的Activity的onResume才会执行。 onStop():表示Activity即将停止，不可见，位于后台。可以做稍微重量级的回收工作，同样不能太耗时。 onDestory():表示Activity即将销毁，这是Activity生命周期的最后一个回调，可以做一些回收工作和最终的资源回收。  几种普遍情况 从A页面Activity跳转到B页面Activity，然后关闭B页面Activity，回到A页面Activity  针对开启的B页面Activity，第一次启动，回调如下：onCreate()-&amp;gt;onStart()-&amp;gt;onResume() 用户打开B页面Activiy的时候，A页面的Activity处于不可见的回调如下：onPause()-&amp;gt;onStop() 再次从B页面回到A页面原Activity时，A页面从不可见到可见回调如下：onRestart()-&amp;gt;onStart()-&amp;gt;onResume() 按back键回退时，B页面Activity回调如下：onPause()-&amp;gt;onStop()-&amp;gt;onDestory() 按Home键切换到桌面后又回到A页面该Actitivy，回调如下：onPause()-&amp;gt;onStop()-&amp;gt;onRestart()-&amp;gt;onStart()-&amp;gt;onResume() 调用finish()方法后，回调如下：onDestory()(以在onCreate()方法中调用为例，不同方法中回调不同，通常都是在onCreate()方法中调用)  Activity的三种运行状态 Resumed（活动状态）  又叫Running状态，这个Activity正在屏幕上显示，并且有用户焦点。这个很好理解，就是用户正在操作的那个界面。
 Paused（暂停状态）  这是一个比较不常见的状态。这个Activity在屏幕上是可见的，但是并不是在屏幕最前端的那个Activity。比如有另一个非全屏或者透明的Activity是Resumed状态，没有完全遮盖这个Activity。
 Stopped（停止状态）  当Activity完全不可见时，此时Activity还在后台运行，仍然在内存中保留Activity的状态，并不是完全销毁。这个也很好理解，当跳转的另外一个界面，之前的界面还在后台，按回退按钮还会恢复原来的状态，大部分软件在打开的时候，直接按Home键，并不会关闭它，此时的Activity就是Stopped状态。
 部分流程分支  启动Activity: onCreate()—&amp;gt;onStart()—&amp;gt;onResume()，Activity进入运行状态。 Activity退居后台: 当前Activity转到新的Activity界面或按Home键回到主屏： onPause()—&amp;gt;onStop()，进入停滞状态。 Activity返回前台: onRestart()—&amp;gt;onStart()—&amp;gt;onResume()，再次回到运行状态。 Activity退居后台，且系统内存不足， 系统会杀死这个后台状态的Activity（此时这个Activity引用仍然处在任务栈中，只是这个时候引用指向的对象已经为null），若再次回到这个Activity,则会走onCreate()–&amp;gt;onStart()—&amp;gt;onResume()(将重新走一次Activity的初始化生命周期) 锁屏：onPause()-&amp;gt;onStop() 解锁：onStart()-&amp;gt;onResume()  横竖屏下切换 第一种情况，销毁当前的Activity： 在横竖屏切换的过程中，Activity会先销毁后重建，也应该避免这种情况。 这里有两个回调：
 onSaveInstanceState和onRestoreInstanceState。 在Activity由于异常情况下终止时，系统会调用onSaveInstanceState来保存当前Activity的状态。这个方法的调用是在onStop之前，它和onPause没有既定的时序关系，该方法只在Activity被异常终止的情况下调用。当异常终止的Activity被重建以后，系统会调用onRestoreInstanceState，并且把Activity销毁时onSaveInstanceState方法所保存的Bundle对象参数同时传递给onRestoreInstanceState和onCreate方法。因此，可以通过onRestoreInstanceState方法来恢复Activity的状态，该方法的调用时机是在onStart之后。其中onCreate和onRestoreInstanceState方法来恢复Activity的状态的区别： onRestoreInstanceState回调则表明其中Bundle对象非空，不用加非空判断。onCreate需要非空判断。建议使用onRestoreInstanceState。 简单来说，这个过程Activity的生命周期为：onPause()-&amp;gt;onSaveInstanceState()-&amp;gt; onStop()-&amp;gt;onDestroy()-&amp;gt;onCreate()-&amp;gt;onStart()-&amp;gt;onRestoreInstanceState-&amp;gt;onResume()  第二种情况，当前的Activity 不销毁，但是我们需要设置Activity的属性： 可以通过在AndroidManifest文件的Activity中指定如下属性：
&amp;lt;activity android:name=&amp;#34;.</description>
    </item>
    
    <item>
      <title>说说Android的内存泄露和溢出</title>
      <link>https://magren.cn/%E8%AF%B4%E8%AF%B4android%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%92%8C%E6%BA%A2%E5%87%BA/</link>
      <pubDate>Sun, 01 Mar 2020 14:27:13 +0000</pubDate>
      
      <guid>https://magren.cn/%E8%AF%B4%E8%AF%B4android%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%92%8C%E6%BA%A2%E5%87%BA/</guid>
      <description>虽然在大学以来学习了一年多的安卓，已经可以完成一部分的需求，但是在Android这方面的底层知识和一些概念我应该不算非常了解，借着这个长假的机会打算好好熟悉下。
Android内存泄漏 内存泄漏是指保存了不可能再被访问的变量引用，导致垃圾回收器无法回收内存。 也就是说： 在Java中有些对象的生命周期是有限的，当它们完成了特定的逻辑后会被回收，但是，如果在对象的生命周期本该被回收时，这个对象仍然还被别的对象所持有引用，那么就会导致内存泄漏。 具体例子：
public class LeakAct extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.aty_leak); test(); } public void test() { new Thread(new Runnable() { @Override public void run() { while (true) { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } }z } }).start(); } } test是一个非静态内部类，当我们finish的时候，该实例不会真正销毁，GC机制也不会进行该实例的垃圾回收，因为***匿名内部类和非静态内部类持有外部类的强引用， ***也就是说test持有外部activity的强引用，而thread内部while(true)是死循环，线程不会停止，对外部activity的强引用也不会消失。这样就造成了内存泄漏。
解决方案
 1.将内部类变成静态内部类; 2.如果有强引用Activity中的属性，则将该属性的引用方式改为弱引用; 3.在业务允许的情况下，当Activity执行onDestory时，结束这些耗时任务;
 Android内存溢出 内存溢出指的是APP向系统申请超过最大阀值的内存请求，系统不会再分配多余的空间，从而造成内存溢出
 典型的例子就是加载多张大图，导致内存耗尽，可以对图片进行适当的质量压缩或者尺寸压缩。 当某个界面存在内存泄露，反复进入该界面，将导致一直有新对象创建但是无法回收，最终导致内存耗尽，造成内存溢出。  </description>
    </item>
    
    <item>
      <title>关于starTranslation</title>
      <link>https://magren.cn/%E5%85%B3%E4%BA%8Estartranslation/</link>
      <pubDate>Mon, 03 Feb 2020 16:16:20 +0000</pubDate>
      
      <guid>https://magren.cn/%E5%85%B3%E4%BA%8Estartranslation/</guid>
      <description>&lt;p&gt;这个项目其实去年就有写了，但是那时候没有用到基类，然后用的是网易云有道翻译的sdk，耦合方面也不是做的很好，在寒假这段时间便把它重构了一遍，
同时用上了rxjava2和retorfit来进行网络的请求以及用上了ButterKnife。这个项目就当作自己的一个学习吧，后面还有什么可以优化的地方再逐步更新。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;附上项目地址：&lt;a class=&#34;link&#34; href=&#34;https://github.com/Magren0321/starTranslation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;starTranslation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Android基类的设计</title>
      <link>https://magren.cn/android%E5%9F%BA%E7%B1%BB%E7%9A%84%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 09 Jan 2020 16:16:20 +0000</pubDate>
      
      <guid>https://magren.cn/android%E5%9F%BA%E7%B1%BB%E7%9A%84%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这两天开始放寒假，在家呆着也是呆着，遂决定找星空以前Android方向大佬写的项目学习下，看看别人代码的结构以及有什么方法可以降低代码的耦合度，然后在师兄的项目里接触到了BaseActivity，在这里记录一下&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
